

 Когда речь идет о препроцессоре, то он называется SASS, а вот писать на нем можно, используя 
 один из двух синтаксисов:

 Sass - Этот синтаксис не использует фигурные скобки и точки с запятой. Есть еще отличия, но о 
       них можно подробнее узнать в документации.
 SCSS - Этот синтаксис в большей своей части копирует синтаксис обычного CSS.




-------------------------------------- ВЛОЖЕННОСТЬ -----------------------------------------------

 Селекторы .logo и .company-name находятся внутри селектора .header.

.header {
  width: 100%;
  height: 70px;
  background: #fff;

  .logo {
    width: 70px;
    height: 70px;
  }

--------------- Вывод

.header {
  width: 100%;
  height: 70px;
  background: #fff;
}

.header .logo {
  width: 70px;
  height: 70px;
}


--------------------------------------- Суффиксы -------------------------------------------------

 & - позволяет вкладывать свойства внутрь друг друга.

.flex {
  display: flex;

  &.justify-content-between {
    justify-content: space-between;
  }

  &.align-items-center {
    align-items: center;
  }
}

 Наличие псевдоклассов, например :hover.
 
 SCSS:

 .link {
  color: #fff;

  &:hover {
    color: #ccc;
    font-weight: bold;
  }
 }


 Комбинирование ----------
 
 Изменени стилей при наведении.

 .link-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;

  a {
    color: blue;
    text-decoration: none;
    border-bottom: 1px solid #f9f9f9;

    img {
      display: none;
    }

    &:hover {
      font-weight: bold;
      color: red;
      border-bottom: 1px solid white;

      img {
        display: block;
        width: 100px;
        height: 20px;
      }
    }
  }
}


------------------------------------ Шаблонные селекторы -----------------------------------------

 Чтобы создать шаблонный селектор, используется символ % и присваивается уникальное имя:
 
  %flex-element-center {
   display: flex;
   justify-content: center;
   align-items: center;
  }


  Применить эти стили к элементу, используется директива @extend.
  
  %flex-element-center { ----- создали шаблон и указали его параметры
   display: flex;
   justify-content: center;
   align-items: center;
  }

  .flex-center {
   @extend %flex-element-center; ----- применили шаблон к .flex-center
  } 

--------------------------------------------------------------------------------------------------

  %flex-element-center {
   display: flex;
   justify-content: center;
   align-items: center;
 }

  .info {
   color: blue;
   font-weight: bold;
   font-size: 1.5em;
 }

  .modal-info {
   @extend %flex-element-center; ----- применили шаблон
   @extend .info;                ----- наследуем стили из класса .info.
   background: #fff;
   border: 3px solid blue;
 }



----------------------------------------- ПЕРЕМЕННЫЕ ---------------------------------------------

 Объявить переменные для этого используется символ $ и указывается уникальное имя.

 $dark: #303846;
 $light: #f7f7f7;

 .card {
  background: $light;
  border: 1px solid $dark;
 }

 Зачем? Но не обязательно!
 
 Переменные в CSS существуют в "настоящем времени", то есть они находятся в CSS-файле, их можно 
 менять непосредственно в CSS и браузеры постоянно ссылаются на них, когда это необходимо. 
 Переменные же в SASS исчезают после компиляции, а вместо них в CSS просто подставляются значения.

 
 Область видимости --------------------------

 $margin-top: 20px; ---------- глобальная переменная

 .card {
   $bg-color: #f9f9f9; ---------- локальная переменная
 }

 .wrapper {
   margin-top: $margin-top;
   background: $bg-color;   ---------- компиляции не произойдет Error: Undefined variable.
 }



--------------------------------------------------------------------------------------------------

 Ещё один пример: селекторы .card-header и .card-body лежат внутри селектора .card, то 
                  переменные $main-bg и $header-bg будут доступны для этих селекторов.

 .card {
   $main-bg: #f9f9f9;
   $header-bg: #2196f3;

   .card-header {
    background: $header-bg;
   }

   .card-body {
    background: $main-bg;
   }
 }


-------------------------- Подключение переменных из другого файла -------------------------------

 └── scss/
    ├── config.scss
    ├── default_variables.scss
    └── app.scss

 Мы хотим подключить настройки из файла config.scss и стандартные настройки переменных из файла 
 default_variables.scss в файл app.scss

 @import - указав путь к необходимому файлу:

 @import "config.scss";
 @import "default_variables.scss";

 Порядок подключения файлов в данном случае очень важен.

 Теперь, подключив файл к нашему основному файлу стилей, мы можем использовать эти переменные. 
 Используем цвета в файле app.scss:

 @import "config";
 @import "default_variables";

 .card {
   background: $primary;

   .btn {
     background: $secondary;
   }
  }

--------------------------------------------------------------------------------------------------


 Если нужно изменить цвет но локально нет файла для изменения, а он загружается извне?
 
 Решение:
 Специальный флаг !default - Флаг позволяет создать значение по умолчанию
 
 1) $primary: #A0D788!default; - не будет использовано.???


------------------------------------- Миксины ----------------------------------------------------
 
 Зачем микмин, когда есть шаблон? Больше возможностей
 Миксины часто используются для свойств, которым необходима поддержка в старых браузерах.
 
 @mixin - создать миксин.

 Внутри этого миксина просто записываются все необходимые правила.

 @mixin reset {
   margin: 0;
   padding: 0;
 }

 @include - включения миксина в селектор.

 ul {
  @include reset;
 }


 После компиляции мы получим следующий CSS-код:

 ul {
  margin: 0;
  padding: 0;
 }