
 ------------------------------------------ H T M L ---------------------------------------------- 

 Блочная модель и CSS ----------
 <hr> - линия декаративная

 padding  - Внутренние отступы.
 border   - Границы.
 margin   - Внешние отступы.
 height и width - Высота и ширина блока

 Различие свойств в поведении:
   border - прямо влияет на блочную модель и размеры элемента
   outline - рисует границу «поверх» элемента и не влияет на его размеры

  
 display: block; -   блочные элементы будут занимать всю доступную ширину а
 display: inline; -  строчные в зависимости от контента внутри
 display: inline-block; -  возможность использовать свойства width и height, свойства 
                           margin/padding/border применяются как на обычный блочный элемент.

 Есть ли разница между section и div с точки зрения поведения?
 Ответ: нет.
 Какую роль выполняет DOCTYPE?
 Ответ: Указание используемой версии HTML.

 Выложить сайт в интернет?
 Ответ: GitHub Pages
 ------------------------------------------ Шрифт -----------------------------------------------
 font-family - указывать шрифты.

 Виды шрифта:
  1) Антиква или шрифты с засечками. - serif.
  2) Гротеск или шрифты без засечек. - sans-serif.
  3) Моноширинный шрифт. - monospace.


 Установка новых шрифтов -----------
 
 @font-face - свойства.
  а) font-family — Имя подключаемого шрифта. Именно по нему можно обратиться после подключения.
  б) src — Путь к файлу со шрифтом.


 Пример:

 @font-face {
  font-weight: normal;
  font-family: Cormorant; ----- стиль шрфита
  src: url("../assets/fonts/Cormorant-Regular.ttf");
}

 font-style:
 а) normal — стандартное значение. Соответствует нормальному отображению шрифта. Именно такой 
             стиль вы читаете прямо сейчас.
 б) italic — курсивное начертание. Данное начертание имеет наклонные буквы, в отличие от 
             нормального стиля. Вот так выглядит курсивный шрифт.
 в) oblique — тоже курсивное начертание. - искусственно наклоняет.
 
 font-variant: small-caps; - Капитель, особый стиль букв. (псевдозаглавные)
 line-height: 1.5; - интервал по вертикали обычно 1.5 от шрифта (16 = 24)
 em - Если размер шрифта равен 16 пикселям, то и 1em равен 16 пикселям. 


 ------------------------------------------ Списки ----------------------------------------------- 
 Маркированные списки ----------
  <ul><h1>Добавить заголовок уровня</h1>
   <li>Маркированные;</li>
   <li>Нумерованные;</li>
   <li>Списки определений.</li>
  </ul>
 Нумерованные списки ----------
  <ol>
   <li>Позавтракать</li>
   <li>Оплатить билет на метро</li>  
  </ol>
 Списки определений ----------
  <dt></dt> — термин;
  <dd></dd> — определение.

  <dl>
   <dt>HTML</dt>
    <dd>Язык гипертекстовой разметки</dd>
   <dt>CSS</dt>
    <dd>Каскадные таблицы стилей</dd>
  </dl>

 list-style-type: square; - стиль маркера на списке.
 list-style-image: url("./good.png"); - картинка на маркере в списке.
 Важно: вы не можете контролировать размеры такого маркера.

 
 ------------------------------------- Создание колонок -----------------------------------------
 <article class="columns-2">
 column-count: 2; - достаточно указать количество колонок и браузер все сделает за вас.
 column-width - ширина колонок.
 column-gap - отступы между колонками. (1em по усолчанию)

 
 Границы между колонками. ---------- как граница border, а не отступ.
 
 column-rule-width — ширина границы.
 column-rule-style — тип границы. Значения совпадают со значениями свойства border.
 column-rule-color — цвет границы.


 Добавление контента в несколько колонок ----------
 none — значение по-умолчанию. Текст находится просто внутри колонок.
 column-span: all; -  текст «выходит из колонки» и разделяет их.


 Перенос колонок ---------- 

 break-before - перенос до перехода полность весь элпемент.
 break-after - перенос после весь элемент.
 break-inside: avoid; - запрет переноса колонки.

 
 -------------------------------------- Единица измерения ---------------------------------------

 Абсолютные единицы ----------
 px - тот самый пиксель.

 Относительные единицы ----------

 % - процент исчисляется от родительского. 30px и 70% от него - 21px
 em -  работает почти как процент но в отношение многих элементов, шрифта
       
        section {                 em = 60px
           font-size: 30px;
        }

        section p {
           margin-bottom: 2em;
        }
 rem - исчисляется в процентах от корня (html)


 Относительные единицы, рассчитывающиеся от размера экрана!!!!!!!
 vw -  ширина viewport
 vh (viewport height) — высота viewport.

 

 ------------------------------------ Медиаэлементы ----------------------------------------------

 Изображение. ----------

1) Если ваше изображение имеет размер 1280 пикселей, то оно будет таким на любом разрешении 
   экрана и в любом контейнере.
   Поможет - max-width — максимальная ширина элемента. Указав значение в 100%, вы запретите 
   элементу занимать ширину больше своего родителя.

 <picture> - для указания нескольких вариантов изображения.
 <source> - варианты изображения.


 Структура. ---------------------------

 <picture>
   <source media="(min-width: 1024px)" srcset="путь_к_изображению_1">
   <source media="(min-width: 700px)" srcset="путь_к_изображению_2">

   <img src="hexlet-images.png" alt="Альтернативное описание изображения">
 </picture>


 Видео и аудио. ----------

 <video> - добавление видео.
 
 autoplay — Автоматическое воспроизведение видео
 controls — добавление интерактивных элементов управления, таких как запуск, остановка, регулировка звука
 muted — Выключение воспроизведения аудиодорожки. Если в видео важен только визуальный ряд
 preload — Указание на предзагрузку видео до взаимодействия с ним
  1) metadata — подгрузка метаданных. К ним относится название видео, его длина.
  2) auto — подгружать видео с самого начала.
  3) none — не загружать видео до момента взаимодействия с пользователем.
 poster — Ссылка на изображение, которое будет использовано в виде превью видео.

 <video class="w-100" poster="./assets/poster.jpg" controls>
      <source src="./assets/magnus-after-mistake.mp4" type="./assets/poster.jpg">
 </video>


 Аудиофайлы. ----------

 <audio src="audio.mp3" controls></audio>

 <audio controls>
  <source src="audio.mp3" type="audio/mpeg">
  <source src="audio.ogg" type="audio/ogg">
 </audio>
  

 ------------------------------------------ Таблицы ----------------------------------------------

 <tr> - создания строки.
 <td> - создания колонок.




  border-collapse: collapse; - граница таблица без двойной границы.
  vertical-align - выравнивания по вертикали.
   1) baseline — выравнивание по базовой линии шрифта.
   2) top — выравнивание по верхнему краю ячейки.
   3) middle — выравнивание по центру.
   4) bottom — выравнивание по нижнему краю ячейки.


 Заголовки таблицы ------------
 
 <thead> - секцию с заголовками можно с помощью тега.внутри шапки используется тег <th> вместо <td>
 <caption> - заголовок самой таблицы используется текст, обрамленный в тег <caption>.
  1) caption-side - top, botoom (серху или снизу заголовок).
 <tbody> -  для основного контента.
 
 Итог: ----------

 <table>
   <caption> ------------------------ заголовок таблицы
     Профессии
   </caption>
     <thead> -------------------------- секция с заголовком
       <tr>
         <th>№</th>
         <th>Название профессии</th>
         <th>Описание</th>
       </tr>
     </thead> ------------------------- секция с заголовком
  
  <tbody> -------------------------- основной контент
    <tr>
      <td>1</td>
      <td>Фронтенд-программист</td>
      <td>
        JavaScript — язык программирования фронтенд-разработки. С его помощью
        программисты делают сайты динамичными и «живыми». Самый востребованный и
        наиболее простой язык для новичков.
      </td>
    </tr>
  </tbody>
</table>

 Объединение строк и столбцов ----------

 colspan — объединение столбцов. (<td colspan="3">)
 rowspan — объединения строк. (<td rowspan="2">)

 Важно: ячейки, на месте которых будут расположены ячейки с colspan и rowspan, должны быть 
        удалены из таблицы.
 Пример:
 
 <tr>
   <td>Алексей Примадонин</td>
   <td>750$</td>
   <td>63$</td>
   <td rowspan="2">Кодовенок Хекслетович</td>
 </tr>
 
 <tr>
   <!-- В этой строке теперь только три столбца -->
   <td>Вениамин Редакторович</td>
   <td>1200$</td>
   <td>0</td>
 </tr>



 --------------------------------------- Формы (сложная) -----------------------------------------

 display: block; - блочные элементы будут занимать всю доступную ширину.
 display: inline; - строчные в зависимости от контента внутри.
 display: inline-block; - а) В отличие от inline есть возможность использовать свойства 
                             width и height.
                          б) свойства margin/padding/border применяются как на обычный 
                             блочный элемент.
                          в) В отличие от блочного элемента его могут «обтекать» другие элементы, 
                             то есть он может вести себя как обычный inline элемент.


 Для выбора всех потомков в CSS используется селектор *.
 .block * {
  color: white;
 }

 Селектор так же можно использовать в комбинации с другими, например >, тогда конструкция
 .block > * {
  color: white;
 }
   установит белый цвет для всех элементов, которые лежат непосредственно в .block, то 
   есть являются прямыми потомками.


 <form> ----------
  1) <input> — одиночный тег, в котором располагается небольшая информация. Это может быть 
               телефон, email, дата рождения, имя и так далее.
  2) <textarea> — парный тег, позволяющий ввести длинное сообщение. Это могут быть комментарии 
                  к заказу, отзыв.
     cols и rows - они отвечают за количество символов и строк. Задать высоту и ширину элемента 
                   через CSS.
  3) action - позволяет указать дирикторию или файл на сервере, куда будут отправлены данные.
              (<form action="/forms/helper.php">).


 textarea ---------- Если нужны данные с переносом текста, то используйте тег <textarea>.
  Как ограничить ширину и высоту textarea?
   1) Установив фиксированные значения высоты и ширины
   2) Используя свойство resize (resize: none;) - запрет пользовательню растягивать поле.

  <form>
   <textarea cols="20" rows="10"></textarea>
  </form>


 input ---------- Единственное исключение — удаление переносов строк перед отправкой на сервер. 
 1) type="text" - позволяет ввести любую пользовательскую информацию.

 <form>
  <input type="text">
 </form>


 <label> ---------- Добавить перед полем заголовок или параграф. Нужно связать label и input.

  1) Связь по идентификатору. Тегу <input> устанавливается id (for). Для тега <label> устанавливается атрибут for.
   <form>
    <label for="name">Ваше имя</label>
    <input id="name" type="text">
   </form>


  2) type="checkbox" - выбор множества вариантов.
     type="radio" - выбор одного варианта из множества доступных.
     value - Внутри него находится то значение, которое отправится на сервер.
     name - Он является уникальным для группы радиокнопок.

 <form>
   <h2>Выберите радиостанцию</h2>
   <div>
      <label>
        <input type="radio" name="radio-fm" value="87.1 FM">
             87.1 FM
      </label>
    </div>
  </form>


   3) type="checkbox" - возможность выбора сразу нескольких значений.

  <form>
   <h2>Ваши любимые блюда</h2>
     <div>
       <label>
         <input type="checkbox" name="dishes" value="pizza">
            Пицца
       </label>
        <br>

       <label>
         <input type="checkbox" name="dishes" value="burger">
          Бургеры
       </label>
     </div>
   </form>


 Списки ----------
   <select> - создание списка текста. (нажимаешь и выдвигается список)
   <option> - пункты которого лежат внутри.
   selected - будет выбран по умолчанию. multiple - выбрать несколько.
 <form>
   <h2>Категория</h2>  
 <select name="category">
    <option value="computer">Компьютеры</option>
    <option value="appliances" selected>Бытовая техника</option>
  </select>
 </form>

 Отправка формы --------- У этих даунов нет примера

  1) Создание <input> с типом submit. В этом случае создастся элемент в виде кнопки с именем, указанным 
     в качестве значения атрибута value.
  2) Использование парного тега <button>.

 Разделение участков формы ----------
  <fieldset> - разделения участков формы на логические секции
  <legend> - в качестве заголовка.

  <form>
    <fieldset>
      <legend>Данные о пользователе</legend>
       <label>
          Имя
         <input type="text" name="name">
       </label>
    </fieldset>
  
    <fieldset>
      <legend>Способ доставки</legend>
        <label>
          Курьер
          <input type="radio" name="delivery" value="courier">
        </label>
    </fieldset>
  </form>


 Текст внутри текстового поля ---------------- !!!!!

  placeholder="Введите ваше имя"> - на поле есть текст, предлагающий ввести данные.

  <input type="text" name="name" placeholder="Введите ваше имя">


 -------------------------------------- Селекторы (сложно!) --------------------------------------
 
 Выбор соседнего элемента ---------- НЕ ПОНЯЛ
 Существует два селектора для выбора элемента, который лежит рядом с другим элементом:
 1) A + B — выбор элемента B, который находится непосредственно после элемента A. 
            Такой селектор называется смежным или соседним.
  <section>
    <h2>Секция с часами</h2>               .time + .timer {
    <div class="time">09:48</div>           color: #4caf50;
    <div class="timer">00:25:11</div>       }
  </section>                                        
    
 ИЛИ  .text {
        color: red;
      }
 
      h1 + .text {
       color: blue;
      }

      Ответ: red.

 2)A ~ B — выбор элемента B, который находится на том же уровне вложенности, что и A.
           Такой селектор называется родственный.
  <section>
    <h2>...</h2>                          .time ~ .timer {
     <div class="time">...</div>            /* Стили элемента */
     <h3>...</h3>                           }
     <h3>...</h3>
     <div class="timer">...</div>
  </section>




 Селекторы по атрибуту ---------- [data-full-screen] - пользовательский атрибут.(какой хочешь)
                                  Короче, атрибут даешь рандомный, а в CSS в скобках указываешь.

 <section data-full-screen></section>       section[data-full-screen] {
                                              background: #2196f3;
                                            }


 Селекторы по значению ---------- [data-full-screen="true"] - пользовательский атрибут.
                                                              (какой хочешь)

 <section data-full-screen="true"></section>        section[data-full-screen="true"] {
                                                      background: #2196f3;
                                                    }


 Можно добавить всем одинаковый класс, но существует одна проблема: если элементы добавляются динамически, с 
 помощью JS, то есть вероятность существования такого же класса внутри проекта.
 Это приведет к коллизии, когда один селектор перебьет свойства другого.

 1)[data-nm-section^="catalog"] - Такой селектор выберет все элементы с атрибутом data-nm-section, 
                                значение которого НАЧИНАЕТСЯ с catalog. Все из примера ниже.

  <section data-nm-section="catalog"></section>
  <section data-nm-section="catalog-popular"></section>
  <section data-nm-section="catalog-new"></section>

 [data-nm-section^="catalog"] {
   width: 50px;
   height: 50px;
   margin-bottom: 10px;
   background: #2196f3;
  }
 
 2) [data-nm-section$="catalog"] — вхождение подстроки в конце значения атрибута.
 3) [data-nm-section*="catalog"] — вхождение подстроки в любом месте значения атрибута.

 Можно обратиться еще так: 
 
 .main > .square

 <section class="main">
   <h2>Квадрат</h2>
     <div class="square" data-figure="square"></div>
 </section>
  



 ----------------------------------------- Псевдоклассы ------------------------------------------
 Псевдоклассов — они позволяют задавать стили не напрямую для элементов, а для их состояний или для 
 некоторых других условий. селектор:псевдокласс.

1) <a href="#">Обычная гиперссылка</a>
2) a:hover {
   color: #2196f3;
   }
3) При наведении на одно поменяется другое.
    a:hover + p {
      color: #2196f3;
      text-decoration: none;
    }
4) :active — Стиль при нажатии на ссылку, но до перехода по ней.
   :visited — Стиль уже посещенной ссылки.
   :focus — Стиль при событии фокуса на элементе.


 Структурные псевдоклассы ----------

1) :nth-child(условие) - выбирает все элементы с учетом того, на какой позиции они находятся.
   
   <section>                     
     <p>Параграф 1</p>              
     <p>Параграф 2</p>
   </section>
   
  а) section p:nth-child(2) { --------- выбрать какой-то определенный
     color: #2196f3;
     }
                 
  б) :nth-child(2n) — выбрать каждый второй элемент. 2,4... - можно выбрать каждый 3-й и тд
     :nth-child(even) — выбрать все четные элементы.
 
  в) :nth-child(2n + 1) — выбрать каждый второй элемент, начиная c первого. 1, 3, 5, 7...
     :nth-child(odd) — выбрать все нечетные элементы.

2) :nth-of-type(условие) - Выборка идет только по элементам <div> вне зависимости от того, какие 
                           еще элементы находятся внутри родителя.

Существует так же более простые: ----------
1) :first-child — выбирает первый элемент внутри родителя.
2) :last-child — выбирает последний элемент внутри родителя.
3) :last-of-type — выбирает последний элемент внутри родителя, учитывая тип элемента.
4) :only-child — выбирает элемент, если он единственный внутри родителя.


----------------------------------------- Псевдоэлементы -----------------------------------------

 Буквица — увеличенный первый символ в параграфе.
 Как сделать? -обернуть первый символ в отдельный тег и стилизовать именно его.
 А если их очень много, а потом вовсе нужно будет убрать его? - решение псевдоэлементы.
 ::first-letter - за стилизацию первого символа.

 Псевдоэлементы по синтаксису очень похожи на псевдоклассы, но вместо одного 
 символа : используется два.


 Псевдоэлементы before и after:

 ::before и ::after позволяют создать новый контент внутри HTML дерева.
 ::before — псевдоэлемент, позволяющий добавить контент перед выбранным элементом.
 ::after — псевдоэлемент, позволяющий добавить контент после выбранного элемента.

Задача:
 <div class="square bg-black text-white">
  <p>Контент внутри блока</p>
 </div>

 .square::before {
  content: "Текст до контента внутри блока";
 }
 .square::after {
  content: "Текст после контента внутри блока";
 }

 Итог:
 Текст после контента внутри блока
 Контент внутри блока
 Текст после контента внутри блока

 ::before и ::after является строчным. То есть имеет свойство display: inline по умолчанию.
 content: ""; - в кавычках размещается контент которые хотим разместить. Он обязателен.


 .hexlet-ul li::before {
   background-image: url("https://assets.codepen.io/1425525/hexlet_logo.png");
   background-repeat: no-repeat;
   background-size: cover;
 }

 background-image: url("https://assets.codepen.io/1425525/hexlet_logo.png"); - установить 
 изображение в качестве фона. url для указания адреса. 
 
 background-repeat: no-repeat; - Повтор изображения. Значение no-repeat запрещает повторять 
                                 изображение.
 background-size: cover; - размер изображения. Ключевое слово cover масштабирует изображение с 
                           сохранением пропорций и вписывает его в высоту или ширину 
                           существующего блока.

 
 --------------------------------------- Переполнение --------------------------------------------

 overflow-x — управление переполнением по горизонтали.
 overflow-y — управление переполнением по вертикали.
 overflow — сокращенная запись двух предыдущих свойств.

 overflow: - позволяет добавить полосу прокрутки
 1) scroll; - полоса прокрутки по горизонтали и вертикали.
 2) auto; - автоматически (лучший варинт).
 3) hidden - скрыть 'лишний' контент.

 Если таких сообщений будет десяток или сотня, то очень легко плюнуть на все и уйти с сайта, 
 чем листать такое количество контента.

 Решение. - отобразить только по одной строчке от имени и сообщения.
 white-space: nowrap; - запретит перенос текста по строкам внутри блока (все в одной строчке)
 overflow: hidden; - обрезаем лишнее.
 
 text-overflow:
  1) clip — значение по умолчанию. Текст «режется» в том месте, где достиг края блока.
  2) ellipsis — вместо грубого среза строки добавляется многоточие.

 Важно: для работы свойства text-overflow необходимо наличие свойства overflow со значением, 
        отличным от visible.
 

 --------------------------------------- CSS Variables -------------------------------------------

 Переменные записываются по шаблону: --имяпеременной: значение; (--main-background: #ccc;)
 :root - позволит вынести переменную для всего проекта, то есть в глобальную область видимости.
 var(--main-background) - принимает имя переменной.

 :root {
  --main-background: #ccc;
 }

 .header {
  background-color: var(--main-background);
 }

 Области видимости переменной: ---------- локальная область видимости
 
 .main-section {
   --padding: 20px 30px;

   padding: var(--padding);
 }

 Переменная --padding доступна только для блока с классом main-section и ВСЕХ ЕГО ПОТОМКОВ.


-------------------------------------------- Фон -------------------------------------------------

 Установка цвета или изображения: ----------

 background-color — установка фонового цвета
 background-image: url("https://assets.ill_1.jpg"), url("path_to_image_2");
                   1) установка фонового изображения или градиента.
                   2) возможность установить изображения через запятую.

 1) repeat — Значение по умолчанию. Копировать изображение по всем направлениям, пока это 
         позволяет пространство.
 2) repeat-x — Копировать только по горизонтали.
 3) repeat-y — Копировать только по вертикали.
 4) no-repeat — Не копировать.
 5) round — Копировать с возможностью сжатия, чтобы уместить максимальное количество копий.
 6) space — Копировать максимальное количество изображений без их обрезки. В начале копии 
    располагаются в крайних точках, а потом равномерно располагаются в остальных частях блока.


 Размер изображения: ----------

  По умолчанию размер изображения равняется оригинальному размеру из файла
  
 background-size - которое принимает два значения: ширину и высоту.
  1) cover — Изображение масштабируется так, чтобы занять весь блок. В этом случае изображение 
             может быть обрезано
  2) contain — Изображение масштабируется так, чтобы максимально покрыть область блока, но 
               не обрезать само изображение


 background-origin - определяет, будет ли фоновое изображение располагаться на внутренних
                     отступах или границах.

  1) border-box — изображение рисуется на всем блоке, включая внутренние отступы и границы.
  2) padding-box — значение по умолчанию. Фоновое изображение рисуется в области блока и его 
                   внутренних отступов.
  3) content-box — фоновое изображение рисуется не по всему блоку, а по области контента 
                   внутри него.

 background-clip - точно определить, как обрезать изображение при его выходе за пределы блока.
  1) border-box — обрезать по внешним границам элемента.
  2) padding-box — обрезать по границам внутренних отступов.
  3) content-box — обрезать по границам контента.
  4) text - обрезка изображения по границам текста.(в тексте картинка)


 Позиционирование фонового изображения ----------
  1) background-position — позиционирование/расположение фона внутри блока
  2) background-attachment — прокрутка фона вместе с контентомы

 
  background-position - расположить изображение в другой точке
  1) top — расположить фон в центре и прижать к верхнему краю
  2) left — расположить фон в центре и прижать к левому краю
  3) right — расположить фон в центре и прижать к правому краю
  4) bottom — расположить фон в центре и прижать к нижнему краю
  5) center — расположить фон в центре
  Можно комбинировать right bottom и тд.

  background-attachment - контролировать поведение изображения (фиксация и тд)
   1) scroll — значение по умолчанию. Фиксируется в области и не пропадает при скролле контента.
   2) fixed - относительно всей страницы целиком. Однако видимо оно будет только в рамках того 
              блока, где был установлен фон.
   3) local — изображение фиксируется в определенной точке относительно контента.


   Порядок записи свойств в background - в любом кроме background: center / 0.5rem


----------------------------------------- Градиент -----------------------------------------------

 linear-gradient() - функция создает линейный градиент (от цвета к цвету).
  Состоит из:

  1) Направление - направление цвета.
     .gradient {
       background: linear-gradient(45deg, #4158d0 0%, #c850c0 40%, #ffcc70 90%);
     }
   45deg - угол наклона.
   0% и т.д - начало одного цвета и след. проценты конец его и начало другого.
   0px  - вместо процентов можно использовать пиксели.

  2) Цветов - Цветов может быть 2, 3, 4, 5 и так далее.
  
     .gradient {
       background: linear-gradient(red, green, blue, yellow);
     }

  repeating-linear-gradient() - создаст повторяющийся градиент.
   .gradient {
  background: linear-gradient(
      45deg,
      #4158d0 0%,
      #4158d0 40%,
      #c850c0 40%,
      #c850c0 90%,
      #ffcc70 90%,
      #ffcc70 100%
    );
   }

  .gradient {
    background: repeating-linear-gradient(45deg,
    var(--orange), var(--orange) 20px,
    var(--dark) 20px, var(--dark) 25px,
    var(--yellow) 25px, var(--yellow) 50px
    );
   }


 Радиальный градиент - создает градиент по кругу (от центра, например, в стороны)
 
 radial-gradient():
  1) Форма: a) circle 
            б) ellipse - по умолчанию.
  
  2) Размер: а) farthest-corner — Градиент распространяется до самого дальнего угла блока.
             б) closest-side — Градиент распространяется до ближайшей границы блока.
             в) closest-corner — Градиент распространяется до ближайшего угла.
             г) farthest-side — Градиент распространяется до самой дальней границы блока.

  3) Тоже можно работать с 'точками остановки':
      
      .gradient {
        background:
        radial-gradient(
        circle,
        #4caf50 25%,
        #ffeb3b 25%,
       }


 Подбор цветов для градиента ------ Нужен круг Иттена

 Комплементарное сочетание - противоположные цвета на круге (если хотим создать контраст)
 Триада - Сочетание контраста и сбалансированности. (центральный треуголник показывает на
          цвета которые можно использовать вместе)
 Контрастная триада - Для построения проводится прямая линия через весь круг, но, с одной 
                      стороны, берутся два соседних цвета.
 Аналоговая триада - берется три соседних друг с другом цвета.





