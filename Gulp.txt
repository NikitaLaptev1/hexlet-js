


---------------------------------------- Введение ------------------------------------------------

 Gulp - таск-менеджер.
 Таск-менеджеры — специальные программы или пакеты, которые дают возможность запрограммировать.
 Зачем он нужен?
 Ведь необходимо постоянно компилировать файлы после изменений: 
 SASS в CSS, Pug в HTML и так далее. Для этого и нужен Gulp чтобы автоматизировать весь процесс.
--------------------------------------------------------------------------------------------------

---------------------------------------- Установка -----------------------------------------------

 Gulp — обычный npm пакет.
 Для установки Gulp воспользуемся двумя командами:
 npm install gulp
 npm install gulp-cli

 gulp-cli - даёт набор команд для работы внутри терминала.
 npx gulp --version - проверить версию gulp


 Организация файлов проекта

 Название директорий.
 Разделение проекта на версию для разработки и версию для выкладки на сайт. 
 Версия для разработки часто называется src, а готовая версия build.

 layout-project/
 ├── build/
 ├── src/
 │   ├── sass/
 │   │   └── app.scss
 │   ├── pages/
 │   │   ├── index.pug
 │   │   ├── sections/
 │   │   │   ├── head.pug
 │   │   │   └── footer.pug
 ├── gulpfile.js
 ├── package.json
 └── node_modules/
-------------------------------------------------------------------------------------------------

--------------------------------------- Gulpfile ------------------------------------------------

 На протяжении всего курса мы будем работать с файлом gulpfile.js. Вспомним структуру проекта:

 layout-project/
 ├── build/
 ├── src/
 │   ├── sass/
 │   │   └── app.scss
 │   ├── pages/
 │   │   ├── index.pug
 │   │   ├── sections/
 │   │   │   ├── head.pug
 │   │   │   └── footer.pug
 ├── gulpfile.js
 ├── package.json
 └── node_modules/

 Весь файл gulpfile.js можно условно разделить на три части:
 1) Подключение необходимых компонентов для работы
 2) Функции-задачи, которые определяют операции
 3) Экспорт задач по умолчанию

 Создадим первую задачу на Gulp:

 const firstTask = (done) => {
  console.log('My First Hexlet Task');

  done();
 };

 exports.default = firstTask;


 Чтобы Gulp мог запустить задачу, её необходимо экспортировать:
 exports.default = firstTask;
 Это задача по умолчанию(default), которую Gulp выполняет если запустить команду gulp в 
 директории с проектом.
--------------------------------------------------------------------------------------------------

 Экспорт задач

 Пример:

 const { parallel } = require('gulp'); - здесь происходит подключение функции parallel() из 
                                         пакета Gulp.
  
 const sassCompile = (done) => {
   console.log('Compile SASS to CSS');

  done();
 };

 const pugCompile = (done) => {
  console.log('Compile Pug to HTML');

  done();
 };

 const imagesOptimize = (done) => {
  console.log('Optimize Images');

  done();
 };

 exports.default = parallel(sassCompile, pugCompile, imagesOptimize);
 exports.layoutCompile = parallel(sassCompile, pugCompile);
 exports.assetsOptimize = imagesOptimize;
--------------------------------------------------------------------

 parallel() - функция позволяет объединять несколько функций в одну задачу(она из пакета Gulp)

 Задача с каким именем будет вызвана при вызове команды gulp без параметров?
 Ответ: default

 Для чего используется exports внутри gulpfile.js?
 Ответ: Для выполнения функции как задачи

 done() - указать окончание задачи с помощью функции

-------------------------------------------------------------------------------------------------

------------------------------------ Базовые функции Gulp ---------------------------------------

 series() - функция позволяет объединять несколько функций в одну задачу, но
            ПОСЛЕДОВАТЕЛЬНОЕ выполение если значение одного может влиять на другое
 parallel() - функция позволяет объединять несколько функций в одну задачу ОДНОВРЕМЕННО.

 Необходимо обработать в формат, который понимает браузер, какой файл будет обработан и куда 
 его нужно переместить после обработки:
 src() - для указания пути к обрабатываемому файлу
 dest() - для указания пути, куда необходимо положить обработанный файл
 
 Пример еще одного применения:
 const { src, dest } = require('gulp');

 const copyFile = () => {
  return src('src/sass/app.scss')
    .pipe(dest('build/styles'));
 };

 exports.copy = copyFile;

 После выполнения задачи файл src/sass/app.scss будет скопирован в директорию build/styles/
-------------------------------------------------------------------------------------------------
 
 Globs

 Что если нужно не один определенный файл/директории/дерева скопировать, а сразу десятки?
 Для указания нескольких файлов используются специальные шаблоны путей — Globs. Это небольшой 
 пакет, который преобразует шаблоны в пути и по умолчанию встроен в Gulp. * **
 
 layout-project/
 ├── src/
 │   ├── sass/
 │   │   ├── global.scss
 │   │   ├── mobile.scss
 │   │   ├── desktop.scss

 Есть два варианта:
 1) Обработать каждый файл в отдельности
 2) Обработать все файлы внутри одной функции

 Вариант 1:
 Создаём три функции, объединяем их в единую задачу и выполняем:

 const { src, dest, parallel } = require('gulp');
 
 const copyGlobalScss = () => {
  return src('src/sass/global.scss')
    .pipe(dest('build/styles'));
 };

 const copyMobileScss = () => {
  return src('src/sass/mobile.scss')
    .pipe(dest('build/styles'));
 };

 const copyDesktopScss = () => {
  return src('src/sass/desktop.scss')
    .pipe(dest('build/styles'));
 };

 exports.copy = parallel(copyGlobalScss, copyMobileScss, copyDesktopScss);
-------------------------------------------------------------------------------------------------

 Вариант 2:

 Использование звёздочки * - она указывает на то, что надо выбрать всё
 Gulp выберет все три файла: global.scss, mobile.scss и desktop.scss

 const { src, dest } = require('gulp');

 const copyScss = () => {
  return src('src/sass/*.scss')  <----- тут *
    .pipe(dest('build/styles'));
 };

 exports.copy = copyScss;
-------------------------------------------------------------------------------------------------

 Вопрос. 
 Предположим, что SASS файлы находятся в совершенно разных директориях, а мы хотим сложить их 
 в единую с расширением scss/sass и скопировать.

 Решение: специальная конструкция **, которая нацелена на проход по директориям.

 const { src, dest } = require('gulp');
 const copyScss = () => {
  return src('src/**/*.scss')  <---- **, *
    .pipe(dest('build/styles'));
 };

 exports.copy = copyScss;

 Итог:
 Будут проверены все директории внутри src на предмет наличия файла с расширением .scss.
 Важно: поиск будет производиться и в самой директории src.
-------------------------------------------------------------------------------------------------
  
 Но что если нужно не все? Например 98 из 100?
 Решение: Добавить исключения.
 ! - метод исключения знак логического отрицания
 
 const { src, dest } = require('gulp');
 const copyScss = () => {

  return src(['src/**/*.scss', '!src/project/**'])
    .pipe(dest('build/styles'));
 };

 exports.copy = copyScss;


 ['src/**/*.scss', '!src/project/**'] — массив строк в котором исключается директория 
 src/project и все вложенные в неё директории.
-------------------------------------------------------------------------------------------------

 Pipe() - позволяет связывать потоки чтения и записи друг с другом.

 Именно с помощью pipe() появляется возможность получить файл и отдать его для последующей 
 обработки функции dest().

 Задача:
 Перенести все файлы стилей с расширением .css из директории project в директорию server.
 Создайте задачу copyCSS, которая соберёт все необходимые файлы и переместит их с сохранением 
 путей директорий. Игнорируйте любые файлы находящиеся в поддиректории old.

 Решение:

 const { src, dest } = require('gulp');
 const copyAllCss = () => src(['project/**/*.css', '!project/dist/old/**'])
  .pipe(dest('./server'));

 exports.copyCSS = copyAllCss;
-------------------------------------------------------------------------------------------------

---------------------------------------- Watch --------------------------------------------------

 watch() - отслеживание.

 Это и есть задача сама по себе, которая начинает свою работу сразу при выполнении команды gulp 
 и завершает свою работу при завершении работы всего скрипта.
 
 Как задать отслеживание файла?
 Для этого используется сама функция watch(), которая принимает три основных параметра:
 1) Пути к отслеживаемым файлам
 2) Параметры отслеживания
 3) Функция или задача, которая вызывается при изменении файла

 Пример без 2 пункта:
 
 const { watch } = require('gulp');

 const changeAppStylesFile = (done) => {
  console.log('Ой, файл app.scss изменился');

  done();
 };

 const watchers = () => {
  watch('src/sass/app.scss', changeAppStylesFile);
 };

 exports.watchers = watchers;

 Важно: в качестве пути можно использовать уже изученные Globs. Так же это не обязательно 
        должен быть файл. В качестве пути можно указать целую директорию
-------------------------------------------------------------------------------------------------

 События.

 Второй параметр функции watch() который определяет параметры работы функции.

 events - отвечает за события, по которым происходит отслеживания
 Внутри него можно указать одно конкретное событие или сразу несколько.

 add — добавление нового файла
 change — изменение файла
 unlink — удаление файла
 addDir — добавление директории
 unlinkDir — удаление директории
 ready — окончание сканирования путей для отслеживания.
 error — ошибка работы отслеживания
 all - по умолчанию (все отслеживание кроме error и ready)


 Пример:
 const { watch } = require('gulp');

 const changeAppStylesFile = (done) => {
  console.log('Ой, файл app.scss изменился');

  done();
 };

 const checkFileStructure = (done) => {
  console.log('Изменилась структура файлов');

  done();
 };

 const watchers = () => {
  // Отслеживание только события `change`
  watch('src/sass/app.scss', { events: 'change' }, changeAppStylesFile);

  // Отслеживание удаления и добавления файлов в директории
  watch('src/sass/', { events: ['add', 'unlink'] }, checkFileStructure);
 };

 exports.watchers = watchers;
------------------------------------------------------------------------------------------------

 Задача.
 
 Создайте задачу copyCSS, цель которой — перенос любых CSS файлов из директории project в 
 директорию server/dist/ с сохранением всех вложенностей директорий.

 Так же создайте задачу watchers, которая отслеживает любые изменения, связанные с CSS файлами 
 в директории project и выполняет функцию переноса, созданную в рамках задачи copyCSS.

 После выполнения тестов директория server/ и файл project/component/notification/atomic.css 
 удаляются.

 Решение:

 const { watch, src, dest, series } = require('gulp');

 const copyAllCss = () => src('project/**/*.css')
  .pipe(dest('./server/dist/'));

 const watchers = () => {
  watch('project/**/*.css', copyAllCss);
 };

 exports.copyCSS = copyAllCss;
 exports.watchers = watchers;
 exports.default = series(copyAllCss, watchers);
------------------------------------------------------------------------------------------------

----------------------------------- Сторонние пакеты -------------------------------------------

 Для поиска пакетов удобно использовать сайт https://www.npmjs.com/ Например, чтобы найти 
 обработчик для SASS файлов можно, в поиске, указать два ключевых слова:
 gulp
 sass

 Сторонние плагины для Gulp — это знакомые нам npm-пакеты. Поэтому их установка ничем не 
 отличается. Всё, что требуется — установить пакет и подключить его в начале созданного 
 gulpfile.js.
------------------------------------------------------------------------------------------------
 
  Sass

  Для обработки файлов, созданных при помощи препроцессора SASS существует пакет gulp-sass.

  Для его использования требуется установить два пакета:
  sass — основной компилятор SASS
  gulp-sass — плагин для Gulp

  Установить всё можно одной командой:
  npm install sass gulp-sass --save-dev

  Добавим компиляцию SASS в CSS. Как и говорилось, это происходит в несколько этапов: 
  подключение пакета и добавление его в цепочку pipe функций:

  const { src, dest } = require('gulp');
  const sass = require('gulp-sass')(require('sass'));

  const buildSass = () => {
  console.log('Компиляция SASS');

  return src('src/sass/*.scss')
    .pipe(sass())
    .pipe(dest('build/styles/'));
  }

  exports.build = buildSass;
------------------------------------------------------------------------------------------------

 Pug

 Обработать Pug в Gulp можно с помощью популярного плагина gulp-pug.
 
 Его установка: 
 Необходимо установить пакет pug и gulp-pug:

 npm install gulp-pug --save-dev
 
 Обработка файлов происходит по уже знакомой нам структуре: 
 1) открытие файла
 2) обработка
 3) запись файла.

 const { src, dest, parallel } = require('gulp');
 const sass = require('gulp-sass')(require('sass'));
 const pug = require('gulp-pug');

 const buildSass = () => {
  console.log('Компиляция SASS');

  return src('src/sass/*.scss')
    .pipe(sass())
    .pipe(dest('build/styles/'));
 }

 const buildPug = () => {
  console.log('Компиляция Pug');

  return src('src/pages/*.pug') ---- ВЗЯЛ ВЕСЬ ПАГ
    .pipe(pug()) ------------------- СКОМПИЛИРОВАЛ
    .pipe(dest('build/')); --------- ОТДАЛ СЮДА
 }

 exports.build = parallel(buildSass, buildPug);

 Важно: в большинстве случаев в функциях-обработчиках, таких как pug() и sass() из примеров 
 выше, доступны дополнительные параметры, позволяющие задать тонкие настройки компиляции.
------------------------------------------------------------------------------------------------

 Browser Sync.
 
 https://www.npmjs.com/package/browser-sync

 Browser Sync - автоматическое обновление окна браузера при выполнении функций.
                одна из самых полезных функций при разработке Frontend.

 Установка.
 npm install browser-sync --save-dev

 Для начала, с помощью плагина, создадим локальный сервер. Для этого необходимо подключить 
 плагин и инициализировать его с параметром server:

 const browserSync = require('browser-sync').create();

 const browserSyncJob = () => {
  browserSync.init({
    server: "build/"
  });
 };

 exports.server = browserSyncJob;

 .stream() - позволяет автоматически обратиться к локальному серверу и перезагрузить его.
------------------------------------------------------------------------------------------------

 Задача.

 Используя данные пакеты создайте задачу build, цель которой:
 1) Скомпилировать все Scss файлы из директории project. В качестве настроек отключите генерацию 
    Source Map
 2) Оптимизировать получившийся CSS с помощью плагина gulp-clean-css
 3) Собрать получившийся CSS в единый файл app.css
 4) Положить файл по пути ./server/www/styles/

 Решение:

 const { src, dest } = require('gulp');
 const sass = require('gulp-sass')(require('sass'));
 const cleanCSS = require('gulp-clean-css');
 const concat = require('gulp-concat');

 const buildScss = () => src('./project/**/*.scss')
  .pipe(sass({ sourceMap: false }))
  .pipe(cleanCSS())
  .pipe(concat('app.css'))
  .pipe(dest('./server/www/styles/'));

 exports.build = buildScss;
 exports.default = buildScss;
------------------------------------------------------------------------------------------------




















































































































































