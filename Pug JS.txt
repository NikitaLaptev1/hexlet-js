
---------------------------------------------- Pug JS -------------------------------------------------------

 Pug используется интерпретатор — программа или скрипт, который переводит шаблон Pug в HTML.

 1) Комманды вводятся в Node.JS Command!!!
 2) Чтобы скомпилировать файл сначала нужно перейти в ее директорию где он находится потом взять 
    файл и перекинуть мышкой в node.js (без указания имени файла)
    pug C:\Users\USER\Desktop - создатся еще один файл но с расширением html

 pug-cli - npm-пакет

 Для установки интерпретатора Pug:
 npm install pug pug-cli ------------ установит компилятор pug и сам пакет pug-cli.
 pug --version ---------------------- узнать версию пакета.

  Выполняется в node js command. Если закрыть консоль то не будет самообновляться
 -out - куда скомпилировать файл (путь к директории)
  pug index.pug --pretty -o ./build/

  
 -watch - будет следить за файлом и компилировать его в случае изменений.
  pug index.pug --pretty -w -o ./build/

  pug --help - полный списко команд.

-------------------------------------------------------------------------------------------------------------
 
  Скомпилировать код - указать команду pug, передать путь к файлу
  pug C:\Users\USER\index.pug --pretty
  --pretty --- результат без минификации, по умолчанию он минифизарован 
              (вырезаны пробелы между тегами, табуляция и перевод строк)

 Первый шаблон:

 doctype html
 html(lang='ru')
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    link(rel='icon' type='image/x-icon' href='favicon.ico')

    title Мой первый Pug-шаблон

    link(rel='stylesheet' href='./styles/app.css')

  body
    h1 Шаблон Pug
    p
      | Мой первый шаблон с использованием Pug.
      | Он позволит мне удобнее верстать страницы.


 Итог:

 <html lang="ru">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <title>Мой первый Pug-шаблон</title>
    <link rel="stylesheet" href="./styles/app.css">
  </head>
  <body>
    <h1>Шаблон Pug</h1>
    <p>
      Мой первый шаблон с использованием Pug.
      Он позволит мне удобнее верстать страницы.
    </p>
  </body>
</html>
-------------------------------------------------------------------------------------------------------------

------------------------------------- Теги и контент ---------------------------------------------

 В Pug нет понятий открытия и закрытия тегов, все теги указываются один раз. 

 p
 div
 span

 выведет:
 <p></p>
 <div></div>
 <span></span>

 Вложить контент внутрь тегов, возможны три варианта:
 1) p Это текст в «инлайн-стиле». Внутри тега будет весь контент, который вы укажете в строке.
 
  Вывод: <p>Это текст в «инлайн-стиле». Внутри тега будет весь контент, который вы... </p>

 2) p
     | Контент в Pipe-стиле
     | Каждая строка начинается с вертикальной черты

  Вывод: <p>
           Контент в Pipe-стиле
           Каждая строка начинается с вертикальной черты
         </p>

 3) p.
     Блочный стиль. Здесь можно указывать любое количество строк.
     И для этого не нужно использовать специальные символы.

 Вывод: <p>
          Блочный стиль. Здесь можно указывать любое количество строк.
          И для этого не нужно использовать специальные символы.
        </p>
--------------------------------------------------------------------------------------------------

 Вложенность тегов в 2 пробела.
 
  section
    p Я — вложенный параграф в секцию
  section
    h2 Лучшие товары в нашем магазине
    div
      h3 Товар 1
      p Цена: 55 рублей

   Вывод:

    <section>
      <p>Я — вложенный параграф в секцию</p>
    </section>

    <section>
      <h2>Лучшие товары в нашем магазине</h2>
      <div>
        <h3>Товар 1</h3>
        <p>Цена: 55 рублей</p>
      </div>
    </section>
--------------------------------------------------------------------------------------------------

 Атрибуты.

 Несколько возможностей по добавлению атрибутов.
 1) Используя круглые скобки. В таком варианте возможно добавлять все аргументы, в том 
    числе и пользовательские.

 section(id='news-container' class='container')
 <section class="container" id="news-container"></section>

 2) Специальный синтаксис для классов и идентификаторов. Они просто обозначаются внутри 
    разметки и похожи на селекторы CSS

 section#news-container.container
 <section class="container" id="news-container"></section>
--------------------------------------------------------------------------------------------------

 Интерполяция тегов.
 
 p.
  Хекслет — #[strong практические] курсы по программированию.
  Мы помогаем новичкам стать профессиональными программистами.

  Вывод: <p>Хекслет — <strong>практические</strong> курсы по программированию.
            Мы помогаем новичкам стать профессиональными программистами.
         </p>
--------------------------------------------------------------------------------------------------

 Пробельные символы.

 Есть несколько вариантов:
 1) Добавить пустую Pipe-строку, которая преобразуется в пробельный символ.
    
   div
     | Воспользуйтесь кнопкой
     |
       button Оформить заказ
     |
     | и оставьте свои контакты

  Вывод:
  <div>Воспользуйтесь кнопкой <button>Оформить заказ</button> и оставьте свои контакты</div>

 2) Использовать HTML-мнемонику - &nbsp;
--------------------------------------------------------------------------------------------------

 Подключение файлов: 
 Готовый файл с определенными тегами или свойствами (шаблон).

 Для примера создадим несколько Pug-файлов с разметкой шапки и футера:

 //- includes/header.pug - расположение файла откуда доставать
 header
  a.logo(href='#') Хекслет
  nav
    a(href='/programs') Программы
    a(href='/courses') Курсы
    a(href='/pricing') Цены
    a(href='/teams') Компаниям
 
 Используя конструкцию include и указав путь к подключаемому файлу.
  body
    include includes/header.pug - Подключение шапки сайта

 Важно: нет необходимости компилировать все файлы, только основной.
--------------------------------------------------------------------------------------------------
 Таким образом можно подключить не только шаблоны с синтаксисом Pug, но и скрипты, CSS код, 
 текстовые данные.

 /* Basis Styles */
 * {
  box-sizing: border-box;

  margin: 0;
  padding: 0;
 }

 doctype html
 html
  include styles/basis.css
--------------------------------------------------------------------------------------------------

 Дополнительные модули.
 Можно пользоваться не только встроенными возможностями, но и расширять их другими обработчиками. 
 Это достигается за счёт взаимодействия с jstransformer.

 Markdown — язык разметки текстов, который может преобразовываться в HTML. Для нубов.
 Для преобразования Markdown в HTML в препроцессоре Pug:
 npm install jstransformer-markdown-it

 Для подключения модуля :название-модуля

 Пример:

 :markdown-it
 Выбирайте Хекслет, если вы:

 * Хотите научиться программировать, но не знакомы с разработкой
 * Хотите получить новую профессию
 * Хотите развиваться

 Вывод:
 <p>Выбирайте Хекслет, если вы:</p>
  <ul>
    <li>Хотите научиться программировать, но не знакомы с разработкой</li>
    <li>Хотите получить новую профессию</li>
    <li>Хотите развиваться</li>
  </ul>


 include:markdown-it main.md - подключить если отдельный файл
--------------------------------------------------------------------------------------------------
 
---------------------------------- Java Script ---------------------------------------------------
 
 Весь JavaScript код внутри препроцессора можно разделить на три основные группы:

 1) Буферизованный код
 2) Неэкранированный буферизованный код
 3) Небуферизованный код
 
 Небуферизованный код:

 Особенность небуферизованного кода — отсутствие вывода в конечном HTML.
 Такой код нужен для создания логики внутри препроцессора:

 Добавляется символ '-'
 1) - const title = "Программы обучения на Хекслете"; // JavaScript код

    .container
     .row
       .col-12
         h1 #{title}

 Интерполяция переменных и выражений:

 - const one = 1;
 - const two = 2;
 - const action = "plus";

 .calculation
  | #{one} #{action} #{two} = #{one + two} ---> <div class="calculation">1 plus 2 = 3</div>

 !{} - при #{} вывод будет с мнемониками, а с ним как есть <p>...<p>
--------------------------------------------------------------------------------------------------

 Буферизованный код:
 Задача буферизованного кода — обработать JavaScript и подставить результат в вёрстку.
 Буферизованный код начинается с символа =

 Пример:
 .plus
   p= 2 + 2

 Вывод:
 <div class="plus">
   <p>4</p>
 </div>
--------------------------------------------------------------------------------------------------
 Пример при вставки спена.
 .buffer
  p!= "<span>Hello</span>, Hexlet"

 <div class="buffer">
  <p><span>Hello</span>, Hexlet</p>
 </div>
--------------------------------------------------------------------------------------------------

---------------------------------- Условные конструкции ------------------------------------------

 В зависимости от того, залогинен он или нет выполнится следующее действие:
 1) Если пользователь залогинен: вывести страницу профиля.
 2) Если пользователь не залогинен: вывести страницу регистрации.
 Как оформить это в виде кода?

 Необходимо определить:
 1) Условную конструкцию.
 2) Условие, по которому происходит ветвление - (выражение 2 + 2 = 4 истинно, а 2 + 5 = 1 — нет)
 3) Блоки кода для условий.
 unless - проверяет ложность выражения

 Пример:

 - const isLogin = true;

 .container
   .row
     .col
       if isLogin == true
         section.profile
           h1 Добро пожаловать!
       else
         section.registration
           h1 Зарегистрируйтесь!

 Остальные примеры в примерах.
--------------------------------------------------------------------------------------------------

--------------------------------------- Циклы ----------------------------------------------------

 выведем пользователя в рейтинге обучающихся. Добавим количество баллов и все данные в таблицу:

-
  const user = {
    name: 'Кодовёнок',
    surname: 'Хекслетович',
    login: 'hexlet-code',
    scores: 1271
  }

 section.container
   h2 Рейтинг пользователей

   table
     thead
       tr
        th Имя
        th Фамилия
        th Логин
        th Баллы
     tbody
       tr
        td= user.name
        td= user.surname
        td= user.login
        td= user.scores

 А что же делать, если пользователя 2? 3? 100?
 Ответ: Создать массив users, внутри которого будут все пользователи.
 
 Создадим массив users и добавим туда несколько разных пользователей:

 const users = [
  {
    name: 'Кодовёнок',
    surname: 'Хекслетович',
    login: 'hexlet-code',
    scores: 1271
  },
  {
    name: 'Король',
    surname: 'Вёрстки',
    login: 'king-of-layout',
    scores: 1100
  },
 ]

 Задача — пройтись по каждому элементу массива и получить информацию внутри него.
 Итерацией - проход по элементам.

 Основным типом цикла в Pug считается цикл each in. Буквально его можно читать как для каждого 
 «a» внутри «b». Где:
 «a» — произвольное имя переменной, которая будет доступна во время итерации.
 «b» — массив или объект, из которого необходимо получить данные.

 Пример:
  
 -
  const users = [
    {
      name: 'Кодовёнок',
      surname: 'Хекслетович',
      login: 'hexlet-code',
      scores: 1271
    },
    {
      name: 'Король',
      surname: 'Вёрстки',
      login: 'king-of-layout',
      scores: 1100
    },
  ]

 section.container
  h2 Рейтинг пользователей

  table
    thead
      tr
        th Имя
        th Фамилия
        th Логин
        th Баллы
    tbody
      each user in users
        tr
          td= user.name
          td= user.surname
          td= user.login
          td= user.scores

 Изменение в всего в одной строчке добавление user in 'users'
--------------------------------------------------------------------------------------------------

 Что если нет ни одного элемента? То что вывести чтобы не подумали об ошибке?
 Решение: each else

 Пример: 

 - const users = [] - без элементов

   each user in users  --------------- ничего не выведится
        tr
          td= user.name
          td= user.surname
          td= user.login
          td= user.scores
   else
        tr
          td(colspan='4') Нет пользователей ---------- в остальных случаях будет сообщение.
--------------------------------------------------------------------------------------------------

 Вложенные циклы и получение ключа объекта.

 Бывает необходимо получить не только значение, но и ключ, по которому располагается объект.

 const users = {
  admin: [
    {
      name: 'Кодовёнок',
      surname: 'Хекслетович',
    },
  ],
 }
  moderator: [
    {
      name: 'Король',
      surname: 'Вёрстки',
    },
    {
      name: 'Алексей',
      surname: 'Примадонин',
    },
  ],

 Решение:
 each people, position in users
  h2= position
  ul
    each user in people
      li= user.name + ' ' + user.surname


 Из объекта users принимаются несколько данных: в переменную people попадает значение, а в 
 переменную position ключ — вначале данные, а потом ключ.

 При первой итерации в первом цикле вытаскивается:
 const people = [
  {
    name: 'Кодовёнок',
    surname: 'Хекслетович',
  },
 ];
 const position = 'admin';

 В дальнейшем идёт перебор по массиву people:
 <h2>admin</h2>
  <ul>
   <li>Кодовёнок Хекслетович</li>
  </ul>
 <h2>moderator</h2>
  <ul>
   <li>Король Вёрстки</li>
   <li>Алексей Примадонин</li>
  </ul>
--------------------------------------------------------------------------------------------------
 
 Цикл while: - повторение участка кода пока истинно условие.

 Пример:
 - let count = 0;

 ul
  while count < 5
    li= "Hello, my number is " + count
    - count += 1;
 
 Вывод:
 <ul>
  <li>Hello, my number is 0</li>
  <li>Hello, my number is 1</li>
  <li>Hello, my number is 2</li>
  <li>Hello, my number is 3</li>
  <li>Hello, my number is 4</li>
 </ul>
--------------------------------------------------------------------------------------------------

---------------------------------------- Миксины -------------------------------------------------

 Каталог магазина. Он может состоять из сотен карточек, которые отличаются только данными.

 Что делать?
 Используются миксины - конструкции, позволяющие описывать и подставлять код в любую 
 часть верстки.
 mixin - создание миксина после имя миксина

 Пример:
 mixin button-order - имя произвольное
  button.btn.btn-order Оформить заявку

 +buttonOrder - вызов миксина.
 +buttonOrder

 Вывод:
 <button class="btn btn-order">Оформить заявку</button>
 <button class="btn btn-order">Оформить заявку</button>
--------------------------------------------------------------------------------------------------

 Миксины как функции:
 Что если много кнопок с разным текстом? Создавать разные миксины?
 Решение: Создать один миксин с переменной
 
 Пример:
 mixin button(title)
  button.btn.btn-order= title

 +button('Заказать')

 Вывод:
 <button class="btn btn-order">Заказать</button>

 Можно установить значение по умолчанию.

 Пример:
 mixin button(title = 'Заказать')
  button.btn.btn-order= title

 +button
 +button('Оформить заявку')
 
 Пример: 
 <button class="btn btn-order">Заказать</button>
 <button class="btn btn-order">Оформить заявку</button>
--------------------------------------------------------------------------------------------------

 Передача вложенного контента в миксин.
 Если таких статей много на сайте, то есть смысл вынести шаблон в отдельный миксин.
 Но как передать данные лучше всего?

 Решение:
 +article('Название статьи', 'Автор статьи')
  include:markdown-it main.md

 Но куда вложить данные? Ведь сам он не знает куда.
 block - для подстановки вложенных в миксин данных.


 mixin article(name, author)
  .post
    h2= name

    .post-body
      block ------- сюда вставиться текст из файла main.md

    .post-author= author

 +article('Название статьи', 'Автор статьи')
  include:markdown-it main.md




















































































 