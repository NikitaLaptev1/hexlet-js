
--------------------------------------------- FLEX -----------------------------------------------

1) Концепция flex вводит новые потоки, с которыми производится работа. Взгляните на 
   картинку ниже.

2) В концепции flex все элементы располагаются в специальных контейнерах, которые называются 
   flex-container.

 display: flex. Теперь этот элемент является контейнером, а все элементы внутри начинают 
 располагаться по осям main и cross.

 Flex поможет вам в следующих ситуациях:
 1) Быстрое создание адаптивного поведения для блоков.
 2) Центровка блоков.
 3) Автоматически высчитывать высоту и ширину блоков без использования JavaScript.
 4) Прижимание футера к низу страницы
 
 Какие свойства не работают с Flex-элементами?
 1) Табличные свойства
 2) Float


------------------------------------- Flex Контейнер ---------------------------------------------

 Display: flex; - контейнер внешне поведет себя как блочный элемент — будет занимать всю 
                  доступную ширину.

 Display: inline-flex; - будет напоминать строчный элемент — он займет ровно столько 
                         пространства, сколько необходимо.

 Flex-direction - мы можем изменить главную ось для отображения элементов.
  1) column - Значение устанавливает в качестве главной оси ось y.
  2) column-reverse - Данное значение также выставляет в качестве главной оси ось y, но как 
                      бы «переворачивает ее».
  3) row - Стандартное отображение. В качестве главной оси выступает ось x.
  4) row - reverse. Элементы выстраиваются по оси x, но с конца оси. Элементы также меняют 
           свой порядок.
 
 
-------------------------------- Перенос элементов в контейнере ----------------------------------

 При нехватки места элементы внутри просто начнут выходить за пределы контейнера, но останутся 
 в одной строке. Как переносить при нехватки места?
 

 При создании адаптивных сайтов.
 Когда предполагается, что элементов будет больше, чем позволит вместить контейнер.
 flex-wrap может принимать одно из трех значений:
  1) nowrap - стандартное поведение флекс-контейнера. Элементы не переносятся и располагаются 
              в одну строку даже при нехватке места.
  2) wrap - данное значение говорит перенести элементы внутри контейнера при нехватке места.
  3) wrap-reverse - то же самое, что и wrap, но происходит не просто перенос, а переворот 
                    блоков по главной оси.


---------------------------- Выравнивание элементов по главной оси -------------------------------

 Что такое главная ось? - ось, по которой выстраиваются элементы. Зависит от свойства 
                          flex-direction
 
  justify-content
   1) center - все элементы помещаются в центре.
   2) flex-start - элементы начинают располагаться с начала контейнера.
   3) flex-end - элементы начинают располагаться с конца контейнера.
   4) space-between - Первый элемент строки становится в начало контейнера, последний в конец. 
                      Остальные элементы равномерно занимают пустое пространство.
   5) space-around - почти как space-between, но отступы появляются и в начале/конце 
                     флекс-контейнера. Отступы в конце и в начале будут равны половине отступа 
                     между элементами.
   6) space-evenly - тоже самое что и space-around, но отступы в конце и в начале будут равны
                     полному отступу между элементами.
 
 
 ------------------------------ Выравнивание по поперечной оси -----------------------------------
 
 Какая ось является поперечной? - ось, перпендикулярная главной оси
 
 align-items
  1) flex-start - элементы располагаются с начала флекс-контейнера по поперечной оси.
  2) end - элементы внутри флекс-контейнера располагаются от конца поперечной оси.
  3) center - элементы внутри флекс-контейнера располагаются по центру поперечной оси.
  4) stretch - если значение больше, чем высота самого высокого блока, то все блоки автоматически 
               пересчитают свою высоту, так как увеличится высота контейнера. По умолчанию.
  5) baseline - воображаемая прямая линия, которая проводится по нижнему краю букв без учета 
                выносных элементов. Именно по ней и будет производиться выравнивание.


-------------------------- Свойства Flex-элементов. Гибкость. Flex-grow --------------------------

 flex-grow - позволяет указать коэффициент увеличения элемента относительно свободного 
             пространства внутри флекс-контейнера. Только увеличивает.
 
 Высчитаем, чему будет равняться одна часть, если мы знаем, что свободного пространства у нас 
 200 пикселей:

 У нас три блока.
 Оставим у центрального блока значение flex-grow: 1, а первому элементу внутри контейнера 
 выставим значение flex-grow: 2.
 
 flex-grow: 1 = 200 / 3 = 66.67.

 Исходя из этого, можно высчитать, сколько пикселей будет прибавлено каждому блоку со свойством 
 flex-grow:

  1) Центральный блок к своей ширине получит еще 66.67 пикселей.
  2) Первый блок внутри контейнера получит дополнительно 133.34 пикселя к своей ширине.


---------------------------------- flex-shrink и flex-basis --------------------------------------

 flex-basis - устанавливает оптимальную ширину высоту элемента. При больших значениях не 
              выйдет за границы, а адаптируется под размер.
 Что такое отрицательный размер контейнера? - разница между размером контейнера и размером всех 
                                              элементов внутри него
 

 flex-shrink - flex-shrink помогает распределить пространство, если места в 
               контейнере недостаточно. По умолчанию flex-shrink равное единице.


 Сколько срежется? Если блоки больше контейнера?
 В нашем случае получится следующая формула:
 Общий вес = 1 * 400 + 1 * 200 + 1 * 200 = 800. Общий вес - значение shrink
 
 Теперь, чтобы узнать окончательную ширину каждого элемента в контейнере, нам необходимо:
 Отрицательную ширину умножить на значение flex-shrink.
 
 Разделить базовую ширину элемента на общий вес.
 Перемножить полученные значения.
 Значения для блока 1 будет следующее:

 (-200 * 1) * (400 / 800) = -100px. Именно на это значение будет уменьшен блок, если ему не хватает места.

 Для двух других блоков можно вычислить значения по этой же формуле и получить -50px.
 
 Значение flex-shrink: 0 запретит блоку сжиматься.



--------------------------------------------------------------------------------------------------
 
 Свойства внутри flex записываются в следующем порядке:

 1) flex-grow
 2) flex-shrink
 3) flex-basis


---------------------------------------- Расположение --------------------------------------------

 order: 1; - отвечает за порядок расположения элементов внутри контейнера. По умолчанию 0.
 
 align-self - главным отличием  от align-items является то, что свойство align-self применяется 
              не ко всему флекс-контейнеру, а к одному конкретному элементу внутри контейнера
 1) center
 2) flex-start
 3) flex-end
 4) baseline

















