

----------------------------------------- Bootstrap ----------------------------------------------

 1) Подключение с помощью CDN (Content Delivery Network)
    Актуальные ссылки в Bootstrap на данный момент:

 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

 2) Подключение с помощью npm пакета: Дает наибольшие возможности по кастомизации Bootstrap.

    Для установки Bootstrap через npm используется команда:
    npm install bootstrap

 При таком подходе разработка зачастую ведется с использованием SASS препроцессора. Чтобы 
 подключить Bootstrap к файлу используется стандартная директива @import.

 @import "../node_modules/bootstrap/scss/bootstrap";


----------------------------------------- Сетка --------------------------------------------------

 Сетку можно разбить на три составные части:

 1) Контейнер
 2) Строки
 3) Колонки
 
 container - является ключевым элементом сетки Bootstrap. Главная задача контейнера — 
             ограничение ширины контента.

 По умолчанию, контент в Bootstrap имеет максимальную ширину в 1140 пикселей.
 Обойти: .container-fluid

 Важно: не вкладывайте контейнер внутри контейнера. Это плохая практика. При необходимости в 
        нескольких контейнерах, вместо вкладывания друг в друга разделите их.
--------------------------------------------------------------------------------------------------

 row - строка берет на себя роль flex-контейнера, внутри которой будут располагаться 
       flex-элементы столбцы. Внутри .row содержатся только колонки!

 Класс .row имеет следующие стили:
 .row {
   display: flex;
   flex-wrap: wrap;
   margin-right: -15px;
   margin-left: -15;
 }
--------------------------------------------------------------------------------------------------

 col - равномерно распределяет пространство между колонками

 Bootstrap — 12-колоночная система.
 .col-*, где \* — количество колонок, которые займет элемент.
 
 Пример:

 <div class="container"> ------------ 1) КОНТЕЙНЕР
  <div class="row"> ----------------- 2) СТРОКА
    <div class="col-4"> ------------- 3) СКОЛЬКО КОЛОНОК ОБЪЕДИНИТЬ ИЗ 12
      <p>Хекслет — практические курсы по программированию.</p>
    </div>
    <div class="col-8">
      <p>Мы считаем, что настоящий программист должен понимать, как работает компьютер.</p>
      <p>При сегодняшнем обилии учебных материалов, курсов и книг.</p>
    </div>
  </div>
</div>

 Первая часть текста получила 4 колонки из 12, вторая же часть текста получила 8 колонок из 12.
--------------------------------------------------------------------------------------------------

------------------------------------- Адаптивность -----------------------------------------------

 С какими разрешениями экрана работает Bootstrap.

 1) Extra small - Ширина viewport меньше 576px. Внутри Bootstrap разрешение не маркируется. 
                  Данный тип является значением по умолчанию. Ширина .container: 100%

 2) Small - Ширина viewport больше или равна 576px. Разрешение маркируется как -sm-. 
            Ширина .container: 540px
     
 3) Medium - Ширина viewport больше или равна 768px. Разрешение маркируется как -md-. 
             Ширина .container: 720px

 4) Large - Ширина viewport больше или равна 992px. Разрешение маркируется как -lg-. 
            Ширина .container: 960px

 5) Extra large - Ширина viewport больше или равна 1200px. Разрешение маркируется как -xl-. 
                  Ширина .container: 1140px
--------------------------------------------------------------------------------------------------
 Пример: 
 
 Добавить нужный префикс, тем самым добиваясь различного отображения на разных разрешениях экрана.

 <div class="container">
  <div class="row">
    <aside class="col-12 col-md-3 col-lg-2">
      <!-- Боковая панель -->
    </aside>
    <main class="col">
      <!-- Основной контент -->
    </main>
  </div>
 </div>

 Вывод...

 При ширине менее 768px панель занимает всю доступную ширину viewport - класс .col-12
 При ширине от 768px до 992px панель занимает 3 из 12 колонок в сетке - класс .col-md-3
 При ширине от 992px панель занимает 2 из 12 колонок в сетке - класс .col-lg-2
--------------------------------------------------------------------------------------------------

 Регулирование количество рядов ('строк'). 

 row-cols-* (где * — значение от 1 до 6)
 
 Пример:

 <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 row-cols-lg-6">

 При ширине больше 992px расставляет по 6 карточек в ряд
 При ширине от 768px до 992px расставляет по 4 карточки в ряд
 При ширине от 576px до 768px расставляет по 2 карточки в ряд
 При ширине меньше 576px расставляет по 1 карточке в ряд
 
 Важно: при использовании классов вида .row-cols-* значения .col-* у элементов игнорируется. 
        Управление по размещению карточек есть только на уровне row!!!!!!!!!!!!!!!!!!!!!!!!!
--------------------------------------------------------------------------------------------------

----------------------------------- Работа с текстом ---------------------------------------------

 .h*, где вместо звездочки используется число от 1 до 6.

 <div class="col">
   <h1>Страница сайта</h1>

   <h2 class="h3">Преимущества работы с нами</h2>
   <h3 class="h2">Быстрая доставка</h3>
   <h3 class="h2">Низкие цены</h3>  
 </div>

 Заголовки имеют нарушенную семантику. Необходимо использовать классы для придания нужных размеров
--------------------------------------------------------------------------------------------------

 Еще в Bootstrap существуют 4 класса, которые отвечают за создание визуальных заголовков. 
 Это классы:
 1) .display-1
 2) .display-2 ----- они чуть больше h1 - h6, но меньше по насыщенности
 3) .display-3  
 4) .display-4 
 
 .list-inline - сбросит значения свойств list-style и padding.
 .list-inline-item - к дочерним элементам, получится inline-список со всеми отступами.

 Пример:

 <nav>
  <ul class="list-inline">
    <li class="list-inline-item"><a href="#">Ссылка 1</a></li>
    <li class="list-inline-item"><a href="#">Ссылка 2</a></li>
    <li class="list-inline-item"><a href="#">Ссылка 3</a></li>
  </ul>
 </nav>
--------------------------------------------------------------------------------------------------

 RFS - Responsive Font Sizes, которая отвечает за адаптивность текста.

 rfs() - принимает rem и свойство. rfs(4rem, font-size);

 .title {
  @include rfs(4rem, font-size); ----- создаст правило font-size для селектора .title
 }


 Дополнительно создаст медиазапрос:

 .title {
  font-size: calc(1.525rem + 3.3vw);
 }

 @media (min-width: 1200px) {
  .title {
    font-size: 4rem;
  }
 }
--------------------------------------------------------------------------------------------------

 Управление шрифтами:

 $font-family-base - находятся шрифты, доступные в рамках проекта.
 $font-family-sans-serif - $font-family-base отсюда берет шрифты по умолчанию.
--------------------------------------------------------------------------------------------------

 Другие полезные свойства и классы: Вся необходимая информация 10/10

 https://getbootstrap.com/docs/5.1/content/typography/
--------------------------------------------------------------------------------------------------

---------------------------------------- Таблицы -------------------------------------------------

 Чтобы воспользоваться возможностями Bootstrap, нужно добавить класс .table к тегу <table>.

 <div class="container">
  <h1 class="mb-4">Профессии</h1>
  <div class="row">
    <div class="col">
      <table class="table"> ------------ .table к тегу <table>.
        <thead>
          <tr>
            <th>№</th>
            <th>Название профессии</th>
            <th>Описание</th>
          </tr>
        </thead>

 Добавит:
 1) Внутренние отступы.
 2) Строки получили разделитель в виде границы.
 и что-то еще 

 Утилиты дают возможность самостоятельно контролировать отступы и границы у формы.

 .table-borderless - удалит все границы  внутри таблицы.
 .table-dark — класс задает темную тему для таблицы. Текст при этом становится белым.
 .table-hover — изменение фона при наведении.
 .table-striped — стилизация строк в стиле зебры. Несколько фонов чередуются друг за другом.
 Это основное, все можно найти в документации.

 <table class="table table-borderless table-dark table-hover table-striped">
--------------------------------------------------------------------------------------------------

 Адаптивность:

 .table-responsive - создания адаптивной таблицы.
 Помимо этого для класса существуют префиксы Bootstrap, которые используются для адаптивности:
 -sm
 -md
 -lg
 -xl
 
 <div class="container">
  <h1 class="mb-4">Профессии</h1>
  <div class="row">
    <div class="col-3">
      <div class="table-responsive">
        <table class="table table-borderless table-dark table-hover table-striped"></table>   
      </div>
     </div>
    </div>
  </div>
--------------------------------------------------------------------------------------------------

 Настройка таблиц с помощью SASS:
 

 Настройки хранятся в файле \_variables.scss. Вот лишь некоторые из них:

 $table-cell-padding-(x или y) — внутренние отступы ячеек. По умолчанию значение .5rem
 $table-cell-vertical-align — выравнивание контента внутри ячеек. По умолчанию имеет значение top.
 $table-th-font-weight — установка значения font-weight для ячеек <th>
 Эти, и другие настройки...
--------------------------------------------------------------------------------------------------

 Доступность таблиц:
 Для людей с ограниченными возможностями.
 col - указываются заголовки таблицы.
 row - указывает на заголовок строки.

 <th scope="col">Название профессии</th>
 <td scope="row">Фронтенд-программист</td>
 Теперь, при чтении ячейки с описанием профессии, скринридер укажет, что заголовок строки: 
 «Фронтенд-программист», а заголовок столбца «Название профессии»
--------------------------------------------------------------------------------------------------

--------------------------------------- Компоненты -----------------------------------------------

 Компоненты - предоставляет готовые блоки со своим дизайном.

 Один из 20 компонентов:
 Кнопки:
 .btn - создание кнопки, может быть применен к любому элементу HTML.
        Создатся кнопка, но визуальные моменты будут отсутствовать.

 <div class="row">
     <div class="col text-end">
       <button class="btn btn-success">Добавить</button>
       <button class="btn btn-warning">Отмена</button>
     </div>
 </div>

 Для добавления визуального содержмого нужны модификаторы:
 
 Модификаторы: - классы вида название Компонента-цвет.

 По умолчанию таких классов у кнопок восемь:
 .btn-primary
 .btn-secondary
 .btn-success
 .btn-danger    --------- Каждый из этих классов добавляет определенный цвет
 .btn-warning
 .btn-info
 .btn-light
 .btn-dark

 Сменить цвета можно с помощью:
 $theme-colors  - отвечает за цветовую тему (в файле _variables.scss.)

 $theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
 ) !default;
--------------------------------------------------------------------------------------------------

--------------------------- Создание пользовательского компонента --------------------------------

 Например у нас есть такая цитата и нужно классам (компонентам) указать персональные стили.

 <blockquote class="citation citation-success">
  <div class="citation-body">Основная задача не в том, чтобы найти ошибку.</div>
  <div class="citation-footer">
    <cite>Кирилл Мокевнин</cite>
  </div>
</blockquote>

 1) В Bootstrap каждый компонент располагается в отдельном файле.
 2) Необходимо создать отдельный файл, где будет подключение Bootstrap и самого компонента.
 
 Таким файлом будет custom.scss. - на выбор название файла

 Общий вид файловой структуры:
  my-project/
   ├── scss/
   │   ├── _citation.scss
   │   └── custom.scss
   ├── style/
   │   └── style.css
   ├── index.html
 
 В файле custom.scss подключим Bootstrap и компонент Citation:

 @import "../node_modules/bootstrap/scss/bootstrap";
 @import "./citation";

 В Bootstrap существуют свои стили для цитат и для этого есть четыре переменные в файле 
 \_variables.scss. Можно использовать во время разработки компонента:
 $blockquote-margin-y:         $spacer !default;  -------------- Используем готовый вариант!!!
 $blockquote-font-size:        $font-size-base * 1.25 !default;
 $blockquote-footer-color:     $gray-600 !default;
 $blockquote-footer-font-size: $small-font-size !default;


 Воспользуемся массивом $spacer. У которого значения:
 $spacer: 1rem !default;
 $spacers: map-merge(
  (
    0: 0,
    1: ($spacer * .25),
    2: ($spacer * .5),
    3: $spacer,
    4: ($spacer * 1.5),
    5: ($spacer * 3)
  ),
  $spacers
 );



 Создадим переменную $font-family-serif в файле custom.scss:
 
 $font-family-serif: "Times New Roman", Times, serif; ---- создали переменную.

 @import "../node_modules/bootstrap/scss/bootstrap";
 @import "./citation";

 Указываем в классе(компоненте):
 .citation {
 ...
 padding: map.get($spacers, 5) map.get($spacers, 4) map.get($spacers, 3); -- готовая переменная
                                                                             от Bootstrap
 $font-family-serif: "Times New Roman", Times, serif; -- своя переменная
 ... 
 }
--------------------------------------------------------------------------------------------------

 Имея массив $theme-colors возможно пройтись по всем цветам и добавить свойство background-color.

 $theme-colors: map-merge( ------------ по умолчанию значения массива $theme-colors
  (
    "primary":    $primary,
    "secondary":  $secondary,
    "success":    $success,
    "info":       $info,
    "warning":    $warning,
    "danger":     $danger,
    "light":      $light,
    "dark":       $dark
  ),
  $theme-colors
 );


 Как добавить background-color всем цветам??
 Так как это ассоциативный массив, то для его перебора можно воспользоваться функцией @each.

 @each $color, $value in $theme-colors {
  .citation-#{$color} {
    color: $white;

    @include gradient-bg($value);
  }
}

 В результате компиляции появятся следующие стили:
 .citation-primary {
  color: #fff;
  background-color: #007bff;
 }

 /* И так далее. Всего 8 классов */
--------------------------------------------------------------------------------------------------

---------------------------------------- Утилиты -------------------------------------------------
 
 Утилиты - Классы, позволяющие переопределять или добавлять стили компонента или тега. 


 Атомарный класс — класс, состоящий из одного свойства и имеющий в названии описание 
                   свойства, которое использует класс.
 Пример: d-block указывает на свойство display со значением block и тд


 Все утилиты в Bootstrap можно условно разделить на две основные группы:
 1) Структурные утилиты - к ним относятся классы влияющие на ширину/высоту, способ отображения, 
                       отступы, позицию.
 2) Утилиты оформления - к ним относятся классы влияющие на цвет, тени.
--------------------------------------------------------------------------------------------------

 Изменяя массив $theme-colors можно добавлять любые пользовательские цвета:
  $theme-colors: (
   "brand": #66bb6a
  );

 После компиляции будет доступен новый класс .text-brand.
  $theme-colors: (
   "brand": #66bb6a
  );

 Важно: Помимо добавления цветов для текста, изменение $theme-colors создаст новые классы для 
        других утилит и компонентов, таких как .bg-, .border-, alert-* и так далее.

--------------------------------------------------------------------------------------------------

 Создание пользовательских утилит:

 Создадим утилиту, позволяющую менять тип курсора при наведении на HTML элемент.
 Получатся следующие значения нам нужны:
 1) cursor-pointer
 2) cursor-default
 3) cursor-none

 $utilities - генерация всех утилит происходит автоматически добавляются необходимые значения 
              в переменную $utilities


 Какие ключи массива здесь представлены?
  1) responsive — создавать утилиты для разных разрешений экрана? Если значение true, то будут 
                  созданы утилиты с префиксами -sm-, -md-, -lg- и так далее
  2) property — название свойства CSS. В данном случае это justify-content
  3) values — значения, которые может принимать свойство. Здесь возможно несколько вариаций 
              того, как могут быть указаны значения. Для свойства justify-content дополнительно 
              указываются алиасы, то есть альтернативные имена, чтобы при генерации утилит 
              получить читаемые названия классов. Сравните:
            
              /* Без указания алиаса */
            .justify-content-space-around {
                justify-content: space-around;
            }

              /* С указанием алиаса */
            .justify-content-around {
                justify-content: space-around;
            }

 4) class — альтернативное именование класса:
    .jc-around {           ----------------------- Вместо justify-content
      justify-content: space-around;
    }
 5) state — возможность добавления утилит для псевдоклассов, как :hover, :focus (state: hover)
    .justify-content-around-hover:hover {
      justify-content: space-around;
    }

 Важно: обязательными являются только ключи property и values. Другие ключи из потребности.
--------------------------------------------------------------------------------------------------

 Итог: Создание утилиты cursor — необходимо добавить новую утилиту в переменную $utilities и 
                                 скомпилировать проект через функцию map-merge.
Пример №1

  $utilities: map-merge(
  $utilities, (
    "cursor": (property: cursor, -------------------- название утилиты
               class: cursor, ----------------------- класс утилиты
               values: pointer grab help progress, -- значенияя которые принимает утилита.
    ),
   )
 );


 После компиляции:

 .cursor-pointer {
  cursor: pointer !important;
 }
 .cursor-grab {
  cursor: grab !important;
 }
 .cursor-help {
  cursor: help !important;
 }
 .cursor-progress {
  cursor: progress !important;
 }
--------------------------------------------------------------------------------------------------

 Пример №2

 $utilities: map-merge(
  $utilities,
  (
    "transition": (
      property: transition, ----- название то есть font-size и тд.
      class: transition, -------- .transition
      values: (
        05: all 0.5s, ----- одно из нескольких значений которое property: transition принимает 
        1: all 1s,
        15: all 1.5s,
        2: all 2s,
      ),
    ),
    "shadow": -------------------------- дополнение утилиты "shodow"
      map-merge(
        map-get($utilities, "shadow"),
        ( state: hover ), -------------- добавление утилиты для hover
    ),
   ),
 );

 















































