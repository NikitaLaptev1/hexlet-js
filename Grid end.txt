
------------------------------------------ GRID --------------------------------------------------

 Cетки — это некая структура, направляющие, с помощью которых мы располагаем контент на странице 
 как по горизонтали, так и по вертикали.
 
 У сеток есть ряд преимуществ:
 1) Сетки предсказуемы. Мы заранее знаем с чем работаем, и как расположится наш контент. 
    Сколько места он займёт относительно других блоков. В этом случае ширина измеряется 
    количеством модулей сетки, а не значениями в пикселях.

 2) Сетки отлично подходят для адаптивности. Это главное преимущество сеток. С ними очень просто 
    создавать адаптивный дизайн для страниц.

 Grid-контейнером - сетка ограничивающая
 Grid-линии - невидимая горизонтальная или вертикальная линия сетки.
 Grid область - несколько ячеек, ограниченные едиными grid линиями.




--------------------------------------- Первая сетка ---------------------------------------------

 Для создания сетки нам необходимо иметь некий контейнер:

 <section class="grid-12"></section>
 
 display: grid; - превратить секцию в grid-контейнер.
 display: inline-grid; - сам контейнер по поведению будет напоминать строчный элемент — он займёт 
                         ровно столько пространства, сколько необходимо.




 1 СПОСОБ СОЗДАНИЯ.
 Создание сетки ----------------------------------------------------------------------------------
 
 grid-template-columns - отвечает за размер колонок.
 grid-template-rows - отвечает за размер строк.
 
 Значения размера.
  1) Принимают любые значения - px, em, rem и так далее.
  2) min-content - при этом значении ширина колонки будет равняться минимально возможной.
  3) max-content - ширина колонки будет равняться максимально возможной.
  4) minmax(min, max) - здесь в качестве значения используется целая функция. Она принимает два 
    значения: минимальный и максимальный размер. То есть мы устанавливаем границы, в пределах 
    которых браузер сам выбирает ширину.
  5) auto - Браузер автоматически подстраивает все колонки так, чтобы самый большой элемент в 
           нашей сетке поместился впритык.
  grid-template-columns: min-content auto 200px;
 
 Для создания сетки с 12 колонками и 12 рядами мы можем по 12 раз указать значения в каждом 
 из свойств.

 Свойства:
  1) Repeat - что бы не писать 12 значений для каждой ячейки.
      grid-template-rows: repeat(12, 20px);
      grid-template-columns: repeat(12, 20px);

  2) auto-fill - Браузер повторит колонки столько раз, сколько может поместиться.
                 grid-template-columns: repeat(auto-fit, 20px);

  3) auto-fit - Браузер повторит колонки столько раз, сколько может поместиться.
                если в контейнере осталось свободное пространство то браузер автоматически 
                сожмёт все остальные полосы до нуля.

 


 Адаптивность сетки ------------------------------------------------------------------------------

 Фракция - единица измерения.
 
  1fr = 1 части свободного пространства.

 Как работает? 
  Сделаем сетку на весь viewpirt - grid-template-rows: repeat(12, 1fr);
                                      grid-template-columns: repeat(12, 1fr);
  Размер этих полос должен определяться автоматически, в зависимости от текущего разрешения 
  viewport. 
  


 
------------------------------- Расположение элементов в сетке -----------------------------------

 Каждая Grid-линия имеет 2 значения: порядковый номер при подсчёте слева направо и номер при 
 подсчёте справа налево.

 Данные номера можно использовать для привязки элементов к конкретным Grid-линиям.

 Для расположения элементов по Grid-линиям в CSS Grid Layout существует 4 свойства:
  1) grid-column-start — указывает на начальную вертикальную Grid-линию расположения элемента.
  2) grid-column-end — указывает на конечную вертикальную Grid-линию расположения элемента. 
                       Обратите внимание, что значение указывает до какой колонки располагать 
                       элемент.
  3) grid-row-start — указывает на начальную горизонтальную Grid-линию расположения элемента.
  4) grid-row-end — указывает на конечную горизонтальную Grid-линию расположения элемента.

  Если вы хотите включить и указанную колонку, то необходимо прибавить единицу. Например для 
  12-колоночного макета указывается значение 13

  grid-column-start: 1;
  grid-column-end: 13;


  Сокращённые версии записи -------------------------------------------------------------------

  .grid-header {
    grid-column: 1 / 13;
    grid-row: 1 / 3;
  }
  
 Ключевое слово span ------------------------------------------------------------------------

 Вместо указания конечного индекса полосы, можно использовать синтаксис: span <количество ячеек>.
 Объединяет колонки*
 grid-row: 1 / span 2; - Указываем, что элемент занимает 2 колонки по вертикали.

 
 Именование линий ---------------------------------------------------------------------------

 Для создания именованных Grid-линий используется следующий синтаксис свойств:

 grid-template-columns: [Название линии]
 grid-template-rows: [Название линии]

 Разберём следующую строку: grid-template-columns: [sidebar-begin] 1fr repeat(3, 1fr) 
                                                   [main-begin] 1fr repeat(7, 1fr);. 
 Её можно разделить на 4 части:

 1) [sidebar-begin] 1fr - создаём линию с именем sidebar-begin и полосу шириной в 1 фракцию.
 2) repeat(3, 1fr) - создаст 3 полосы с шириной 1 фракция каждая.
 3) [main-begin] 1fr - создаётся линия main-begin. Ширина полосы после линии составит 1 фракцию.
 4) repeat(7, 1fr). Создаётся 7 полос с шириной 1 фракция каждая.

 Теперь данные имена можно использовать можете обращаться к этим линиям как по индексу 
 (положительному или отрицательному), так и по их именам. Имена произвольные.




 2 СПОСОБ СОЗДАНИЯ.
 Создание именованных Grid-областей --------------------------------------------------------------

 Для чего? 
  Это свойство позволяет визуализировать сетку с помощью этих имён.

  1) grid-template-areas -  создания именованных областей

  2) grid-template-areas: "header header header" 
                          "aside main main"; - Первый и второй ряд. Можно переносить строки.
                                               Имя произвольное.

  .grid-header {
    grid-area: header; --------- использование имени в grid-template-areas.
    height: 50px;
  }

 Бывают ситуации, когда нужна пустая ячейка:
  grid-template-areas со значение точки .



 ---------------------------------- Пример реальной сетки ----------------------------------------

 .code-editor {

  display: grid;
  grid-template-areas: "header header header header header header"
                        "aside aside main main main main"
                        "aside aside footer footer footer footer";
  grid-template-rows: max-content;
  grid-template-columns: repeat(6, 1fr);
  
  width: 100vw;
  height: 100vh;
  margin: 0;
  background: #33235a;
  }
 
   .editor-header {
     grid-area: header;
    }
 
   .editor-header {
     grid-area: aside;
    }
 
   .editor-header {
     grid-area: main;
    }
 
   .editor-header {
     grid-area: footer;
    }



------------------------------------- Работа с сеткой --------------------------------------------

 Cоздания отступов между Grid-полосами существует 2 свойства: 
  1) column-gap - отвечает за отступ между колонками
  2) row-gap - отвечает за отступ между рядами.
  3) grid-gap - 20 20; для рядов и колонок, а если одно значение для всех сразу.
  column-gap: 30px; - и все остальные единицы измерения.



--------------------------------- Позиционирование полос------------------------------------------

 justify-content - позволяет выровнять Grid-полосы по горизонтали.
 align-content - выровняет ряды внутри контейнера по вертикали.



------------------------------------ Неявная сетка -----------------------------------------------

 Под ней подразумеваются любые участки секции, которые не были заданы явно, но образовались 
 вследствие расположения элементов внутри сетки.

 1) Указать значение больше чем есть на самом деле то будет неявная сетка, она растянется на все 
    пространство, а если добавить еще больше, то разделит пополам эту область.

   .grid-element:nth-child(1) {
     grid-column-start: 7; ----------- всего 6.
   }


 Управление неявной сеткой ------------------------------
 
 Существует два правила:
   grid-auto-rows — высота трека в неявной сетке
   grid-auto-columns — ширина трека в неявной сетке

--------------------------------------------------------------------------------------------------
   Новая ячейка трека не может быть ниже соседней, так как это нарушит логику работы сетки.
    grid-auto-rows — высота трека в неявной сетке
    grid-auto-columns — ширина трека в неявной сетке


 Пример: -----------------------------------

 <section class="grid-2">
  <div class="grid-element bg-gray"></div>
  <div class="grid-element bg-red"></div>
  <div class="grid-element bg-blue"></div>
  <div class="grid-element bg-green"></div>
  <div class="grid-element bg-orange"></div>
 </section>


 .grid-2 {
  display: grid;
  grid-template-columns: repeat(2, 50px);
  grid-template-rows: repeat(2, 50px);
  
  grid-auto-rows: 50px;
 }

  .bg-gray {
    background: #717790;
  }

   .bg-red {
     background: #ff3c41;
   }

   .bg-blue {
     background: #0ebeff;
   }

   .bg-green {
     background: #4caf50;
   }

   .bg-orange {
     background: #ff9800;
   }

   Разместив в этой сетке пять элементов вместо четырёх, получим одну неявную Grid-полосу, 
   которая образовалась вследствие неявной сетки. Блок оранжевым цветом.
  
   Изменение ширины полосы неявной сетки в данном примере не сработает, так как это нарушит 
   логику работы сетки.


------------------------------------ Позиционирование и Grid -------------------------------------

 При использовании сетки, основанной на Grid, можно использовать значения свойства position
 

 Относительное позиционирование ----------

 Элемент, который имеет относительное позиционирование, смещается относительно текущего 
 расположения.


 Абсолютное позиционирование ----------

 Применение абсолютного позиционирования, элемент перестал подчиняться правилам сетки. Теперь 
 размер элемента определяется только размером контента. Свойства grid-template-columns 
 и grid-template-rows никак не влияют на такие элементы.

 Абсолютно позиционированный элемент внутри контейнера отзывается на свойства размещения 
 элементов grid-column и grid-row!
 
 Пример: 

 .absolute {
   position: absolute;

   grid-row: 2;
   grid-column: 3;
 }

 Элемент будет находиться на второй строке и третьем столбце.

