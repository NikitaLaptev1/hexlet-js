
-------------------------------- 2D трансформации. Перемещение ----------------------------------
                                      
 Модуль CSS Transform:
 translate() — перемещение объекта по координатам x и y
 rotate() — поворот объекта относительно его левого верхнего угла
 scale() — масштабирование объекта
 skew() — наклон элемента. В двумерном пространстве функция деформирует элемент

 Точка отсчёта:
 Точкой отсчета является верхний левый угол объекта.

 Перемещение объекта:
 translate() - для перемещения объекта вдоль осей координат x и y.
 Пример: transform: translate(x, y)


 Relative VS Translate -------------------------------------------

 Зачем использовать функцию translate(), если давно существует относительное позиционирование и 
 свойства top, right, bottom, left?

 Разница в:
 1) Использование процентных значений
    Для функции translateX() этой системой является сам объект, а для относительно 
    позиционированного элемента — контейнер.
 2) Работа с анимациями
-------------------------------------------------------------------------------------------------

------------------------------- 2D трансформации. Вращение --------------------------------------

 transform: rotate(X, Y); - вращение объекта;
 Используются специальные единицы:
 deg — Градусы.
 grad — Градианы. Полный круг описывается в 400 град.
 rad — Радианы. Мера, при которой за одну единицу принимается угол дуги.
 turn — Оборот. Единица равна одному полному обороту.

 Точка вращения
 Точкой вращения является центр элемента

 Скорость вращения:
 transition - регулировать сокрость вращения

 transform-origin - изменить точку вращения
 Например верхний левый угол:
 1) transform-origin: 0% 0%
  или
 2) transform-origin: left top


 backface-visibility - определяет, видно ли заднюю грань элемента, когда он повёрнут 
                       к пользователю. (visible; hidden;)


 Вращение по одной оси--------------------------

 @keyframes rotate { --------------- вращение вокруг оси X (вертикально)
  from {
    transform: rotateX(0deg);
  }

  to {
    transform: rotateX(360deg);
  }
 }
-------------------------------------------------------------------------------------------------
 
----------------------------- 2D трансформации: Масштабирование. --------------------------------

 Масштабирование — возможность увеличивать или уменьшать элемент на определённый коэффициент.

 transform: scale() - масштабирование. Принимает 2 значения (в 2d анимации)
 1) Одно значение: масштабирование происходит на одинаковый коэффициент и по оси x и по оси y. 
 2) Два значения: в качестве первого значения передаётся масштабирование по оси x, а в качестве 
                  второго аргумента масштабирование по оси y.

 Важно: функция scale() влияет на всё, что расположено внутри блока и на него самого. 
        Одновременно расширяется.

 Значения функции scale() - по умолчанию единица. 
 1 единица = 100% увеличения/уменьшения
 Что больше единицы элемент увеличит, а что меньше - уменьшит.

 Представьте, что происходит с элементом, когда его масштабирование по оси x стремится к нулю. 
 Элемент всё больше начинается сплющиваться до тех пор, пока значение не станет нулём. 
 Элемент визуально исчезнет, хотя, на самом деле он продолжит своё существование. 
 Если дать теперь отрицательное значение, то элементу нужно расти, но куда? 
 Правильно — в противоположную сторону. Можно сказать отзеркалим.


 Точка трансформации и масштабирование ----------------------------------------------------------

 Можно установить точку трансформации transform-origin в любом месте. Обычно нет смысла кроме
 значений: top, right, bottom, left

 Что делать, если мы хотим увеличить элемент, но он увеличивается и тем самым смещается?
 Нужно поменять точку центра откуда будет происходить увелечение

 Решение: transform-origin
 Одно значение — установка точки трансформации по оси x.
 Два значения — установка точки трансформации по осям x и y.

 Воспользуемся этими значениями и укажем, что центральный блок должен иметь точку трансформации 
 в следующем виде:
 По оси x точка трансформации должна находиться слева
 По оси y точка трансформации должна находиться сверху

 Пример работы transform-origin колокольчик подписки в примерах
-------------------------------------------------------------------------------------------------
 
---------------------------------- 2d трансформации. Наклон -------------------------------------

 Если rotate() поворачивает то skew() наклоняет.

 skew(X, Y) - отвечает за трансформацию путем наклона
 transform: skewX(45deg);

 Единицы которые принимает skew()
 deg — Градусы.
 grad — Градианы. Полный круг описывается в 400 град.
 rad — Радианы. Мера, при которой за одну единицу принимается угол дуги.
 turn — Оборот. Единица равна одному полному обороту.

 skew() наклоняет элемент и все что внутри, чтобы это избежать нужно создать еще один:

 <div class="box blue skewx-45deg">
   <div class="skewx-minus45deg">skewX(45deg</div>
 </div>
-------------------------------------------------------------------------------------------------

---------------------------------- 3D трансформации. Основы -------------------------------------

 В трехмерном пространстве появляется дополнительная ось z

 Перспектива. Свойство показывает, на каком расстоянии (глубина сцены) по оси z располагается 
              элемент.

 perspective: 800px; - дает 3-х мерную 'текстуру'

 Принимает единицы такие как: px, em, rem и так далее.

 
 Точка зрения ----------------------------
 
 Постепенно меняйте положение своей головы или объекта и обратите внимание на то, как вы будете 
 видеть то же вращение, но под другим углом. Об этом эта тема.

 perspective-origin - определение точки зрения с которой мы наблюдаем трансформацию.
 
 По умолчанию такой точкой является центр обьекта. Которое выглядит так:
 perspective-origin: 50% 50%;
-------------------------------------------------------------------------------------------------

--------------------------------- 3D трансформации. Функции -------------------------------------

 Чтобы браузеру было легче, при трансформации трёхмерных объектов к функции дописывается 3d. 
 Таким образом мы получаем 3 функции для трёхмерных элементов:
 1) translate3d(x, y, z) — перемещение
 2) rotate3d(x, y, z) — вращение
 3) scale3d(x, y, z) — масштабирование
 

 *Если выставить перспективу элементу в котором кубы, то у этих элементов перспективна будет
  реалистична (3 куба сверху середина низ)
 Единственная трансформация, которая отсутствует для оси z — skew()


 transform-style принимает одно из двух значений:
 1) flat - Значение по умолчанию. Оно говорит о том, что элемент находится в той же плоскости, 
          что и его родитель.
 2) preserve-3d — элемент как бы находится в своём трёхмерном пространстве, а не в пространстве 
                  своего родителя. Это означает, что элементы будут независимы друг друга. 
                  Например, они могут проходить сквозь друг друга

 Важно: свойство transform-style устанавливается единожды для родительского элемента. 
 Так как свойство отвечает за создание пространства, то нет смысла в установке свойства 
 дочерним элементам.
-------------------------------------------------------------------------------------------------



 
 
 

































































